"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5288],{81205:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>m,toc:()=>l});var o=n(97458),c=n(16436);const i={},s=void 0,m={id:"auto-generated/previews/web-component/theme-switcher",title:"theme-switcher",description:"\x3c!--",source:"@site/docs/auto-generated/previews/web-component/theme-switcher.md",sourceDirName:"auto-generated/previews/web-component",slug:"/auto-generated/previews/web-component/theme-switcher",permalink:"/docs/auto-generated/previews/web-component/theme-switcher",draft:!1,unlisted:!1,editUrl:"https://www.github.com/siemens/ix/edit/main/packages/documentation/docs/auto-generated/previews/web-component/theme-switcher.md",tags:[],version:"current",frontMatter:{}},r={},l=[];function a(e){const t={code:"code",pre:"pre",...(0,c.a)(),...e.components};return(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-html",children:"<style>\n  ix-col {\n    display: flex;\n    align-items: center;\n    height: 2.5rem;\n  }\n</style>\n\n<ix-layout-grid>\n  <ix-row>\n    <ix-col size=\"2\">\n      <span>Light/Dark</span>\n    </ix-col>\n    <ix-col>\n      <ix-button id=\"toggle-mode\">Toggle mode</ix-button>\n    </ix-col>\n  </ix-row>\n\n  <ix-row>\n    <ix-col size=\"2\">Theme</ix-col>\n    <ix-col>\n      <ix-select id=\"select-theme\" placeholder=\"Select a theme\">\n      </ix-select>\n    </ix-col>\n  </ix-row>\n\n  <ix-row>\n    <ix-col size=\"2\">Use System</ix-col>\n    <ix-col>\n      <input type=\"checkbox\" id=\"system\" />\n      <label for=\"system\"></label>\n    </ix-col>\n  </ix-row>\n</ix-layout-grid>\n\n<script type=\"module\">\n  import { themeSwitcher } from '@siemens/ix';\n\n  (async function () {\n    const themes = ['theme-classic-light', 'theme-classic-dark'];\n    let selectedTheme = themes[1];\n\n    setTimeout(() => {\n      themeSwitcher.setTheme(selectedTheme);\n    });\n\n    const toggleModeButton = document.getElementById('toggle-mode');\n    toggleModeButton.addEventListener('click', () => {\n      themeSwitcher.toggleMode();\n    });\n\n    const themeSelect = document.getElementById('select-theme');\n    themes.forEach((theme) => {\n      const item = document.createElement('ix-select-item');\n      item.label = theme;\n      item.value = theme;\n      themeSelect.appendChild(item);\n    });\n\n    themeSelect.value = selectedTheme;\n\n    themeSelect.addEventListener(\n      'itemSelectionChange',\n      ({ detail: [theme] }) => {\n        themeSwitcher.setTheme(theme);\n        selectedTheme = theme;\n      }\n    );\n\n    const toggleSystem = document.getElementById('system');\n    toggleSystem.addEventListener('change', ({ target }) => {\n      if (target.checked) {\n        themeSwitcher.setVariant();\n        return;\n      }\n\n      themeSwitcher.setTheme(selectedTheme);\n    });\n  })();\n<\/script>\n"})})}function h(e={}){const{wrapper:t}={...(0,c.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},16436:(e,t,n)=>{n.d(t,{Z:()=>m,a:()=>s});var o=n(52983);const c={},i=o.createContext(c);function s(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function m(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);